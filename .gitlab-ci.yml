# Author: Daniel J.Mazure
# Date: 05.12.2021
# Description: GitLab CI configuration script.

# Tests over the FPGA set to manual temporarily until one specific machine is devoted
# to that task.
#
# The CI/CD flow generates a bitstream both for the targeted EA.
# The Pipeline can be triggered if there is an update (rule "changes") in the
# ea_url.txt file/folder
# TODO: [Documentation] References are mandatory to exist in the EA included yml

# Include the supported EA configuration files. This could be done in other
# included file for clarity

include:
  - local: cicd/ea_conf.yml
  - local: support/acme/setup.yml


# The workflow includes all the necessary rules to run all the jobs in this .gitlab-ci.yml.
# The pipeline ca be trigger for:
# pipeline: Multi-project pipelines
# merge_request_event: to production branch
# Using web
# Tag
# The specifics for each environment

workflow:
    rules:
        - if: $CI_PIPELINE_SOURCE == "pipeline"
        - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "production"
        - if: $CI_PIPELINE_SOURCE == "web"
        - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
          when: never
        - if: $CI_COMMIT_TAG != null
        - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"
          when: never # Pushing to main doesn't create pipelines unless there is a tag
        - !reference [.test_rules, rules]
        - !reference [.production_rules, rules]
        - !reference [.quick_test_rules, rules]

variables: !reference [.setup, variables]

stages:
    - synthesis
    - implementation
    - bitstream
    - test
    - deploy

.clone_ea: &clone_ea
    # This is a Gitlab CI/CD requirement. Use a token-ed URL instead of the regular one.
    # The load_module script loads the txt file in the support folder.
    # The hidden job substitute the SHA in case this is a triggered pipeline
    # The extract_url script inserts the token into the repo URL.
    - echo "Inserting the Gitlab token in the EA's URL"
    - sh/load_module.sh $EMULATED_ACCELERATOR
    - echo "$COMMIT_SHA"; echo "Actual URL:"; cat ea_url.txt
    - echo "CommitREF is $COMMIT_REF"; echo "The commit SHA is $COMMIT_SHA"
    - !reference [.update_sha, script]
    - echo "After update_sha:"; cat ea_url.txt
    - sh/extract_url.sh ea_url.txt $CI_BUILD_TOKEN
    - echo "After update_sha:"; cat ea_url.txt

# EMULATED_ACCELERATOR might be an export variable instead of a GitLab one.
# Then, before script can setup this bash variable depending on the value
# of the EA matrix/parallel value. This way we can clone other EAs


synthesis_production:
        stage: synthesis
        extends: .common_conf_production
        rules:
            - !reference [.production_rules,rules]
        interruptible: true
        retry: 1
        variables:
            GIT_STRATEGY: clone
            GIT_SUBMODULE_STRATEGY: "recursive"
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
            #Protosyn flags for prodcution environment
            PROTON_OP: meep eth ncmem hbm pronoc
        before_script:
            - !reference [.git_clean, before_script]
            - *clone_ea
            - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "https://gitlab.bsc.es/"
            - echo "Actual element in the matrix is $EA + ${FPGA_BOARD}"
            - !reference [.export_toolchain, before_script]
        script:
            - echo "[DEBUG] synthesis"
            - make initialize
            - make $FPGA_BOARD
            # Synthesis production will use Pronoc routers
            - make project EA_PARAM=$EA EA_PARAM+="${PROTON_OP}"
            - !reference [.riscv_benchmarks, script]
            - make synthesis
            - !reference [.check_synth, script]
        after_script:
            - mkdir -p tmp/project
            - !reference [.synth_default, after_script]
            - cp ea_url.txt tmp/EA_info.txt
            - cp shell_build.log tmp/project/
            - cp -r src/system_top.sv tmp/project/
            - cp -r tcl/shell_env.tcl tmp/project/
            - cp gen_system.tcl tmp/project/
            - mv dcp/synthesis.dcp dcp/synthesis_${EA}_${FPGA_BOARD}_production.dcp
            - !reference [.save_dts, after_script]
            - !reference [.riscv_benchmarks, after_script]
            - echo -e "Artifacts:"; ls tmp; ls dcp
        allow_failure: false # If any sinthesys fails, all fails
        artifacts:
          when: always
          expire_in: 3 day
          paths:
            - tmp
            - dcp/synthesis_${EA}_${FPGA_BOARD}_production.dcp


synthesis_test:
        stage: synthesis
        extends: .common_conf_test
        rules:
            - !reference [.test_rules, rules]
        interruptible: true
        retry: 1
        variables:
            GIT_STRATEGY: clone
            GIT_SUBMODULE_STRATEGY: "recursive"
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        before_script:
            - !reference [.git_clean, before_script]
            - *clone_ea
            - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "https://gitlab.bsc.es/"
            - echo "Actual element in the matrix is $EA + $FPGA_BOARD"
            - !reference [.export_toolchain, before_script]
        script:
            - make initialize
            - make $FPGA_BOARD
            # Synthesis for test env, we are using OP routers so we just need the default protsyn flags. Only specify the acme_ea name
            - make project EA_PARAM=$EA
            - !reference [.riscv_benchmarks, script]
            - make synthesis
            - !reference [.check_synth, script]
        after_script:
            - mkdir -p tmp/project
            - !reference [.synth_default, after_script]
            - cp ea_url.txt tmp/EA_info.txt
            - cp shell_build.log tmp/project/
            - cp -r src/system_top.sv tmp/project/
            - cp -r tcl/shell_env.tcl tmp/project/
            - cp gen_system.tcl tmp/project/
            - mv dcp/synthesis.dcp dcp/synthesis_${EA}_${FPGA_BOARD}_test.dcp
            - !reference [.save_dts, after_script]
            - !reference [.riscv_benchmarks, after_script]
            - echo -e "Artifacts:"; ls tmp; ls dcp; tree
        allow_failure: false # If any sinthesys fails, all fails
        artifacts:
          when: always
          expire_in: 3 day
          paths:
            - tmp
            - dcp/synthesis_${EA}_${FPGA_BOARD}_test.dcp

synthesis_quick_test:
        stage: synthesis
        rules:
            - !reference [.quick_test_rules, rules]
        interruptible: true
        retry: 1
        tags:
            - synthesis
        timeout: 8h
        variables:
            GIT_STRATEGY: clone
            GIT_SUBMODULE_STRATEGY: "recursive"
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_u55c
            FPGA: u55c
        before_script:
            - !reference [.git_clean, before_script]
            - *clone_ea
            - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/".insteadOf "https://gitlab.bsc.es/"
            - echo "Actual element in the matrix is $EA + $FPGA"
            - !reference [.export_toolchain, before_script]
        script:
            - make initialize
            - make u55c
            # Synthesis for test env, we are using OP routers so we just need the default protsyn flags. Only specify the acme_ea name
            - make project EA_PARAM=$EA
            - !reference [.riscv_benchmarks, script]
            - make synthesis
            - !reference [.check_synth, script]
        after_script:
            - mkdir -p tmp/project
            - !reference [.synth_default, after_script]
            - cp accelerator/build/alveou280/system/protosyn_logs/make_project.log  tmp/make_project.log
            - cp ea_url.txt tmp/EA_info.txt
            - cp shell_build.log tmp/project/
            - cp -r src/system_top.sv tmp/project/
            - cp -r tcl/shell_env.tcl tmp/project/
            - cp gen_system.tcl tmp/project/
            - mv dcp/synthesis.dcp dcp/synthesis_${EA}_u55c_qtest.dcp
            - !reference [.save_dts, after_script]
            - !reference [.riscv_benchmarks, after_script]
            - echo -e "Artifacts:"; ls tmp; ls dcp
        allow_failure: false # If any sinthesys fails, all fails
        artifacts:
            when: always
            expire_in: 1 day
            paths:
            - tmp
            - dcp/synthesis_${EA}_u55c_qtest.dcp

implementation_production:
        stage: implementation
        extends: .common_conf_production
        rules:
            - !reference [.production_rules,rules]
        needs: [synthesis_production]
        variables:
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        before_script:
            - mv dcp/synthesis_${EA}_${FPGA_BOARD}_production.dcp dcp/synthesis.dcp #?
        script:
            - make ci_implementation DCP_ON=false
            - !reference [.check_impl, script]
        after_script:
            - mv dcp/implementation.dcp dcp/implementation_${EA}_${FPGA_BOARD}_production.dcp
            - echo -e "Artifacts:"; ls dcp; ls reports
            - mv reports reports_${EA}_${FPGA_BOARD}_production
        artifacts:
            when: always
            expire_in: 3 day
            paths:
                - dcp/implementation_${EA}_${FPGA_BOARD}_production.dcp
                - reports_${EA}_${FPGA_BOARD}_production

implementation_test:
        stage: implementation
        extends: .common_conf_test
        variables:
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        rules:
            - !reference [.test_rules,rules]
        needs: [synthesis_test]
        # As this is a matrix, rename the corresponding dcp for make to recognize it
        before_script:
            - mv dcp/synthesis_${EA}_${FPGA_BOARD}_test.dcp dcp/synthesis.dcp
        script:
            - make ci_implementation DCP_ON=false
            - !reference [.check_impl, script]
        after_script:
            - mv dcp/implementation.dcp dcp/implementation_${EA}_${FPGA_BOARD}_test.dcp
            - mv reports reports_${EA}_${FPGA_BOARD}_test
            - echo -e "Artifacts:"; ls dcp; ls reports; tree
        allow_failure: true
        artifacts:
            when: always
            expire_in: 3 day
            paths:
                - dcp/implementation_${EA}_${FPGA_BOARD}_test.dcp
                - reports_${EA}_${FPGA_BOARD}_test

implementation_quick_test:
        stage: implementation
        variables:
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_u55c
        rules:
            - !reference [.quick_test_rules,rules]
        tags:
            - synthesis
        timeout: 8h
        needs: [synthesis_quick_test]
        # As this is a matrix, rename the corresponding dcp for make to recognize it
        before_script:
            - mv dcp/synthesis_${EA}_u55c_qtest.dcp dcp/synthesis.dcp
        script:
            - make ci_implementation DCP_ON=false
            - !reference [.check_impl, script]
        after_script:
            - mv dcp/implementation.dcp dcp/implementation_${EA}_u55c_qtest.dcp
            - mv reports reports_${EA}_u55c_qtest
            - echo -e "Artifacts:"; ls dcp; ls reports
        allow_failure: true
        artifacts:
            when: always
            expire_in: 3 day
            paths:
                - tmp
                - dcp/implementation_${EA}_u55c_qtest.dcp
                - reports_${EA}_u55c_qtest

bitstream_production:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        stage: bitstream
        extends: .common_conf_production
        rules:
            - !reference [.production_rules,rules]
        needs: [implementation_production]
        before_script:
            - mv dcp/implementation_${EA}_${FPGA_BOARD}_production.dcp dcp/implementation.dcp
        script:
            - make ci_bitstream
        after_script:
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - make clean_implementation
            - mv bitstream/system.bit bitstream/${date_format}_${EA}_${FPGA_BOARD}_production.bit
            - echo -e "Artifacts:"; ls bitstream
            # Store the Job ID to identify later the path to the bitstream artifact
            - echo BS_CI_JOB_ID_${EA}_u55c=$CI_JOB_ID >> gen_bitstream.env
        artifacts:
            when: always
            expire_in: 7 days
            paths:
                - bitstream
            reports:
             dotenv: gen_bitstream.env

bitstream_test:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        stage: bitstream
        extends: .common_conf_test
        rules:
            - !reference [.test_rules,rules]
        needs: [implementation_test]
        before_script:
            - mv dcp/implementation_${EA}_${FPGA_BOARD}_test.dcp dcp/implementation.dcp
        script:
            - make ci_bitstream
        after_script:
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - make clean_implementation
            - mv bitstream/system.bit bitstream/${date_format}_${EA}_${FPGA_BOARD}_test.bit
            - echo -e "Artifacts:"; ls bitstream
            # Store the Job ID to identify later the path to the bitstream artifact
            - echo BS_CI_JOB_ID_${EA}_${FPGA_BOARD}=$CI_JOB_ID >> gen_bitstream.env
        allow_failure: true
        artifacts:
            when: always
            expire_in: 7 days
            paths:
                - bitstream
            reports:
             dotenv: gen_bitstream.env

bitstream_quick_test:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_u55c
        stage: bitstream
        rules:
            - !reference [.quick_test_rules,rules]
        tags:
            - synthesis
        timeout: 8h
        needs: [implementation_quick_test]
        before_script:
            - mv dcp/implementation_${EA}_u55c_qtest.dcp dcp/implementation.dcp
        script:
            - make ci_bitstream
        after_script:
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - make clean_implementation
            - mv bitstream/system.bit bitstream/${date_format}_${EA}_u55c_qtest.bit
            - echo -e "Artifacts:"; ls bitstream
            # Store the Job ID to identify later the path to the bitstream artifact
            - echo BS_CI_JOB_ID_${EA}_u55c=$CI_JOB_ID >> gen_bitstream.env
        allow_failure: true
        artifacts:
            when: always
            expire_in: 3 days
            paths:
                - bitstream
            reports:
             dotenv: gen_bitstream.env

reports_production:
        stage: bitstream
        extends: .common_conf_production
        variables:
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        rules:
            - !reference [.production_rules,rules]
        needs: [implementation_production]
        before_script:
            - mv dcp/implementation_${EA}_${FPGA_BOARD}_production.dcp dcp/implementation.dcp
        script:
            - echo "Generate implementation reports..."
            - make ci_report_route
            - make validate
        after_script:
            #- !reference [.reports_data, after_script]
            - ls reports
            - mkdir -p tmp/reports
            - mv reports reports_${EA}_${FPGA_BOARD}_production
        artifacts:
            when: always
            paths:
                - reports_${EA}_${FPGA_BOARD}_production

reports_test:
        stage: bitstream
        extends: .common_conf_test
        variables:
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        rules:
            - !reference [.test_rules,rules]
        needs: [implementation_test]
        before_script:
            - ls; ls dcp; tree
            - mv dcp/implementation_${EA}_${FPGA_BOARD}_test.dcp dcp/implementation.dcp
        script:
            - echo "Generate implementation reports..."
            - make ci_report_route
            - make validate
        after_script:
            #- !reference [.reports_data, after_script]
            - ls reports
            - mkdir -p tmp/reports
            - mv reports reports_${EA}_${FPGA_BOARD}_test
        allow_failure: true
        artifacts:
            when: always
            paths:
                - reports_${EA}_${FPGA_BOARD}_test

reports_quick_test:
        stage: bitstream
        variables:
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_u55c
        rules:
            - !reference [.quick_test_rules,rules]
        tags:
            - synthesis
        timeout: 8h
        needs: [implementation_quick_test]
        before_script:
            - ls; ls dcp; tree
            - mv dcp/implementation_${EA}_u55c_qtest.dcp dcp/implementation.dcp
        script:
            - echo "Generate implementation reports..."
            - make ci_report_route
            - make validate
        after_script:
            #- !reference [.reports_data, after_script]
            - ls reports
            - mkdir -p tmp/reports
            - mv reports reports_${EA}_u55c_qtest
        allow_failure: true
        artifacts:
            when: always
            expire_in: 3 days
            paths:
                - tmp
                - reports_${EA}_u55c_qtest

##################
### Tests jobs ###
##################

#1. Boot Buildroot/linux
# The entire fpga-test is EA dependant, it should probably be a job from an included file
fpga-test-linux-production:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        stage: test
        retry: 2
        extends: .common_conf_production
        rules:
            - !reference [.production_rules,rules]
        needs: [bitstream_production]
        # Overwrite tags to select the right board
        tags:
            - $FPGA_BOARD
        before_script:
            - !reference [.fpga_test, before_script]
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - export BITSTREAM=bitstream/${date_format}_${EA}_${FPGA_BOARD}_production.bit
        script:
            # The EA script should provide the right script and the right binary
            - ./fpga-tools/fpga/load-bitstream-onic.sh qdma $BITSTREAM
            - !reference [.fpga_test, script]
            - ./fpga-tools/fpga/fpga_test.sh $FPGA_LOG_TEST_BUILDROOT "Welcome to Buildroot"
        after_script:
            - !reference [.fpga_test, after_script]
            - mkdir -p tmp/logs # Keep the log even if the boot fails
            - cp $FPGA_LOG_TEST_BUILDROOT tmp/logs/$FPGA_LOG_TEST_BUILDROOT
        allow_failure: false
        artifacts:
            when: always
            paths:
            - tmp

fpga-test-linux-test:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        stage: test
        retry: 2
        extends: .common_conf_test
        rules:
            - !reference [.test_rules,rules]
        needs: [bitstream_test]
        # Overwrite tags to select the right board
        tags:
            - $FPGA_BOARD
        before_script:
            - !reference [.fpga_test, before_script]
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - export BITSTREAM=bitstream/${date_format}_${EA}_${FPGA_BOARD}_test.bit
        script:
            # The EA script should provide the right script and the right binary
            - ./fpga-tools/fpga/load-bitstream-onic.sh qdma $BITSTREAM
            - !reference [.fpga_test, script]
            - ./fpga-tools/fpga/fpga_test.sh $FPGA_LOG_TEST_BUILDROOT "Welcome to Buildroot"
        after_script:
            - !reference [.fpga_test, after_script]
            - mkdir -p tmp/logs # Keep the log even if the boot fails
            - cp $FPGA_LOG_TEST_BUILDROOT tmp/logs/$FPGA_LOG_TEST_BUILDROOT
        allow_failure: true
        artifacts:
            when: always
            paths:
            - tmp

fpga-quick-linux-test:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_u55c
        stage: test
        extends: .quick_test_rules
        retry: 2
        rules:
            - !reference [.quick_test_rules,rules]
        needs: [bitstream_quick_test]
        # Overwrite tags to select the right board
        tags:
            - $FPGA_BOARD
        timeout: 8h
        before_script:
            - !reference [.fpga_test, before_script]
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - export BITSTREAM=bitstream/${date_format}_${EA}_u55c_qtest.bit
        script:
            # The EA script should provide the right script and the right binary
            - ./fpga-tools/fpga/load-bitstream-onic.sh qdma $BITSTREAM
            - !reference [.fpga_test, script]
            - ./fpga-tools/fpga/fpga_test.sh $FPGA_LOG_TEST_BUILDROOT "Welcome to Buildroot"
        after_script:
            - !reference [.fpga_test, after_script]
            - mkdir -p tmp/logs # Keep the log even if the boot fails
            - cp $FPGA_LOG_TEST_BUILDROOT tmp/logs/$FPGA_LOG_TEST_BUILDROOT
        allow_failure: false
        artifacts:
            when: always
            expire_in: 3 days
            paths:
            - tmp


#2. Benchmarks
test-benchmarks-production:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        stage: test
        retry: 2
        extends: .common_conf_production
        rules:
            - !reference [.production_rules,rules]
        needs: [synthesis_production,bitstream_production]
        tags:
            - $FPGA_BOARD
        before_script:
            - !reference [.fpga_test, before_script]
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - export FPGA_LOG=fpga_test_baremetal_${EA}_${FPGA_BOARD}_production.log
            - export BITSTREAM=bitstream/${date_format}_${EA}_${FPGA_BOARD}_production.bit
            - mkdir -p tmp/test_logs
            - !reference [.test_benchmark, before_script]
        script:
            # The EA script should provide the right script and the right binary
            - ./fpga-tools/fpga/load-bitstream-onic.sh qdma $BITSTREAM
            - ./fpga-tools/fpga/run_loop_binaries.sh tmp/bin/bin_$EA/test_list.list $FPGA_LOG
            - echo "Checking FPGA log ..."
            - cat $FPGA_LOG
            - mv $FPGA_LOG tmp/test_logs/$FPGA_LOG
        after_script:
            - echo "The baremetal tests have been tested"
        allow_failure: false
        artifacts:
            when: always
            paths:
            - tmp

test-benchmarks-test:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        stage: test
        retry: 2
        extends: .common_conf_test
        rules:
            - !reference [.test_rules,rules]
        needs: [synthesis_test,bitstream_test]
        # Overwrite tags to select the right board
        tags:
            - $FPGA_BOARD
        before_script:
            - !reference [.fpga_test, before_script]
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - export FPGA_LOG=fpga_test_baremetal_${EA}_${FPGA_BOARD}.log
            - export BITSTREAM=bitstream/${date_format}_${EA}_${FPGA_BOARD}_test.bit
            - mkdir -p tmp/test_logs
            - !reference [.test_benchmark, before_script]
        script:
            # The EA script should provide the right script and the right binary
            - ./fpga-tools/fpga/load-bitstream-onic.sh qdma $BITSTREAM
            - ./fpga-tools/fpga/run_loop_binaries.sh tmp/bin/bin_$EA/test_list.list $FPGA_LOG
            - echo "Checking FPGA log ..."
            - cat $FPGA_LOG
            - mv $FPGA_LOG tmp/test_logs/$FPGA_LOG
        after_script:
            - echo "The baremetal tests have been tested"
        allow_failure: true
        artifacts:
            when: always
            paths:
            - tmp

test-benchmarks-quick_test:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_u55c
        stage: test
        retry: 2
        rules:
            - !reference [.quick_test_rules,rules]
        needs: [synthesis_quick_test,bitstream_quick_test]
        # Overwrite tags to select the right board
        tags:
            - u55c
        timeout: 8h
        before_script:
            - !reference [.fpga_test, before_script]
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - export FPGA_LOG=fpga_test_baremetal_${EA}_u55c_qtest.log
            - export BITSTREAM=bitstream/${date_format}_${EA}_u55c_qtest.bit
            - mkdir -p tmp/test_logs
            - !reference [.test_benchmark, before_script]
        script:
            # The EA script should provide the right script and the right binary
            - ./fpga-tools/fpga/load-bitstream-onic.sh qdma $BITSTREAM
            - ./fpga-tools/fpga/run_loop_binaries.sh tmp/bin/bin_$EA/test_list.list $FPGA_LOG
            - echo "Checking FPGA log ..."
            - cat $FPGA_LOG
            - mv $FPGA_LOG tmp/test_logs/$FPGA_LOG
        after_script:
            - echo "The baremetal tests have been tested"
        allow_failure: false
        artifacts:
            when: always
            expire_in: 3 days
            paths:
            - tmp

#3. Boot Fedora
fpga-test-fedora-production:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        stage: test
        retry: 2
        extends: .common_conf_production
        rules:
            - !reference [.production_rules,rules]
        needs: [bitstream_production]
        # Overwrite tags to select the right board
        tags:
            - $FPGA_BOARD
        before_script:
            - !reference [.fpga_test, before_script]
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - export BITSTREAM=bitstream/${date_format}_${EA}_${FPGA_BOARD}_production.bit
            - !reference [.fpga_test_fedora, before_script]
        script:
            - ./fpga-tools/fpga/load-bitstream-onic-nfs.sh qdma $BITSTREAM
            - ./fpga-tools/fpga/load-bitstream-onic-nfs.sh x--reload-fs fedora_image.img osbi.bin
            - ./fpga-tools/fpga/fpga_test.sh $FPGA_LOG_TEST_FEDORA "fedora-riscv login:"
        after_script:
            - ./fpga-tools/fpga/load-bitstream-onic.sh driverdown
            - mkdir -p tmp/logs
            - cp $FPGA_LOG_TEST_FEDORA tmp/logs/$FPGA_LOG_TEST_FEDORA
        allow_failure: false
        artifacts:
            when: always
            paths:
            - tmp

fpga-test-fedora-test:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_${FPGA_BOARD}
        stage: test
        retry: 2
        extends: .common_conf_test
        rules:
            - !reference [.test_rules,rules]
        needs: [bitstream_test]
        # Overwrite tags to select the right board
        tags:
            - $FPGA_BOARD
        before_script:
            - !reference [.fpga_test, before_script]
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - export BITSTREAM=bitstream/${date_format}_${EA}_${FPGA_BOARD}_test.bit
            - mkdir -p tmp/logs
            - !reference [.fpga_test_fedora, before_script]
        script:
            - ./fpga-tools/fpga/load-bitstream-onic-nfs.sh qdma $BITSTREAM
            - ./fpga-tools/fpga/load-bitstream-onic-nfs.sh x--reload-fs fedora_image.img osbi.bin
            - ./fpga-tools/fpga/fpga_test.sh $FPGA_LOG_TEST_FEDORA "fedora-riscv login:"
        after_script:
            - ./fpga-tools/fpga/load-bitstream-onic.sh driverdown
            - mkdir -p tmp/logs
            - cp $FPGA_LOG_TEST_FEDORA tmp/logs/$FPGA_LOG_TEST_FEDORA
        allow_failure: true
        artifacts:
            when: always
            paths:
            - tmp


fpga-quick-fedora-test:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
            GIT_STRATEGY: fetch
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/${EA}_u55c
        stage: test
        retry: 2
        extends: .quick_test_rules
        rules:
            - !reference [.quick_test_rules,rules]
        needs: [bitstream_quick_test]
        # Overwrite tags to select the right board
        tags:
            - $FPGA_BOARD
        timeout: 8h
        before_script:
            - !reference [.fpga_test, before_script]
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - export BITSTREAM=bitstream/${date_format}_${EA}_u55c_qtest.bit
            - !reference [.fpga_test_fedora, before_script]
        script:
            - ./fpga-tools/fpga/load-bitstream-onic-nfs.sh qdma $BITSTREAM
            - ./fpga-tools/fpga/load-bitstream-onic-nfs.sh x--reload-fs fedora_image.img osbi.bin
            - ./fpga-tools/fpga/fpga_test.sh $FPGA_LOG_TEST_FEDORA "fedora-riscv login:"
        after_script:
            - ./fpga-tools/fpga/load-bitstream-onic.sh driverdown
            - mkdir -p tmp/logs
            - cp $FPGA_LOG_TEST_FEDORA tmp/logs/$FPGA_LOG_TEST_FEDORA
        allow_failure: false
        artifacts:
            when: always
            expire_in: 3 days
            paths:
            - tmp


deploy-EA-production:
        stage: deploy
        # Run the job only when all jobs in earlier stages succeed or have allow_failure: true
        when: on_success
        rules:
            - !reference [.production_rules,rules]
        needs: [synthesis_production,implementation_production,bitstream_production,reports_production,fpga-test-linux-production,test-benchmarks-production,fpga-test-fedora-production]
        variables:
            GIT_STRATEGY: fetch
            DESIRED_FORMAT: "%Y%m%d"
        timeout: 8h
        tags: !reference [.default_tags, tags]
        before_script:
            # The UTC datetime when the pipeline was created
            - ls tmp; tree
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - export EADIRNAME=${date_format}_${CI_PIPELINE_ID}_production
            - export ABSDIR=$SHELL_DEPLOY_DIR/$EADIRNAME
            - echo "FPGA Shell deploys here ${ABSDIR}"
            - mkdir -p $ABSDIR
        script:
            - echo "Deploy date, commit_sha,reports,dcp, bitstreams"
            - date >> $ABSDIR/date.txt
            - echo "$CI_COMMIT_SHA" >> $ABSDIR/commit_sha.txt
            - ls tmp; tree
            - mv bitstream tmp/
            - mkdir -p tmp/reports; mv reports_* tmp/reports/
            - mv dcp tmp/
            - cp -r tmp/* $ABSDIR
            - ls $ABSDIR
            # Store production's bitstreams: acme_ea_1h2g, acme_ea_4a, acme_ea_4h2v
            - curl -k -u "${MEEP_REGISTRY_USER}:${MEEP_REGISTRY_PASSWORD}" --upload-file $ABSDIR/bitstream/${date_format}_acme_ea_4a_u55c_production.bit ${MEEP_RAW_REPOSITORY}/bitstreams/acme_ea_4a/${date_format}_acme_ea_4a_u55c_production.bit
            #- curl -k -u "${MEEP_REGISTRY_USER}:${MEEP_REGISTRY_PASSWORD}" --upload-file $ABSDIR/bitstream/${date_format}_acme_ea_4a_u280_production.bit ${MEEP_RAW_REPOSITORY}/bitstreams/acme_ea_4a/${date_format}_acme_ea_4a_u280_production.bit
            #- curl -k -u "${MEEP_REGISTRY_USER}:${MEEP_REGISTRY_PASSWORD}" --upload-file $ABSDIR/bitstream/${date_format}_acme_ea_4h2v_u55c_production.bit ${MEEP_RAW_REPOSITORY}/bitstreams/acme_ea_4h2v/${date_format}_acme_ea_4h2v_u55c_production.bit
            #- curl -k -u "${MEEP_REGISTRY_USER}:${MEEP_REGISTRY_PASSWORD}" --upload-file $ABSDIR/bitstream/${date_format}_acme_ea_4h2v_u280_production.bit ${MEEP_RAW_REPOSITORY}/bitstreams/acme_ea_4h2v/${date_format}_acme_ea_4h2v_u280_production.bit
            #- curl -k -u "${MEEP_REGISTRY_USER}:${MEEP_REGISTRY_PASSWORD}" --upload-file $ABSDIR/bitstream/${date_format}_acme_ea_1h2g_u55c_production.bit ${MEEP_RAW_REPOSITORY}/bitstreams/acme_ea_1h2g/${date_format}_acme_ea_1h2g_u55c_production.bit
            #- curl -k -u "${MEEP_REGISTRY_USER}:${MEEP_REGISTRY_PASSWORD}" --upload-file $ABSDIR/bitstream/${date_format}_acme_ea_1h2g_u280_production.bit ${MEEP_RAW_REPOSITORY}/bitstreams/acme_ea_1h2g/${date_format}_acme_ea_1h2g_u280_production.bit
        after_script:
            - echo "The deploy has finished"
        allow_failure: false
        environment:
            name: production
            url: ${MEEP_RAW_REPOSITORY}

deploy-EA-test:
        stage: deploy
        # Run the job only when all jobs in earlier stages succeed or have allow_failure: true
        when: on_success
        rules:
            - !reference [.test_rules,rules]
        needs: [synthesis_test,implementation_test,bitstream_test,reports_test,fpga-test-linux-test,test-benchmarks-test,fpga-test-fedora-test]
        variables:
            GIT_STRATEGY: fetch
            DESIRED_FORMAT: "%Y%m%d"
        timeout: 8h
        tags: !reference [.default_tags, tags]
        before_script:
            - ls; ls dcp; tree
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - export EADIRNAME=${date_format}_${CI_PIPELINE_ID}_test
            - export ABSDIR=$SHELL_DEPLOY_DIR/$EADIRNAME
            - echo "FPGA Shell deploys here ${ABSDIR}"
            - mkdir -p $ABSDIR
            - ls
        script:
            - date >> $ABSDIR/date.txt
            - echo "$CI_COMMIT_SHA" >> $ABSDIR/commit_sha.txt
            - mv bitstream tmp/
            - mkdir -p tmp/reports; mv reports_* tmp/reports/
            - mv dcp tmp/
            - cp -r tmp/* $ABSDIR
            - ls $ABSDIR
        after_script:
            - echo "Remember - Exported variables are not propagated to after_script"
        allow_failure: false
        environment:
            name: test

# This job needs to put together all the bitstreams. No parallel jobs here
release_job:
        variables:
            DESIRED_FORMAT: "%Y%m%d"
        stage: deploy
        tags: !reference [.default_tags, tags]
        when: on_success
        image: registry.gitlab.com/gitlab-org/release-cli:latest
        variables:
            TARGET_GOLDEN: acme_ea_4a
            TARGET_MEEP: acme_ea_4hv2
            JOB_ID_GOLDEN: ${BS_CI_JOB_ID_acme_ea_4a_production}
            JOB_ID_MEEP: ${BS_CI_JOB_ID_acme_ea_4hv2_production}
        rules:
            - if: $CI_COMMIT_TAG # Run this job when a tag is created
        script:
            # The UTC datetime when the pipeline was created
            - date_format="$(date -d "$CI_COMMIT_TIMESTAMP" +"$DESIRED_FORMAT")"
            - echo "Running release job"
        release:
         name: 'MEEP Release $CI_COMMIT_TAG'
         description: 'CICD release with bitstreams [$TARGET_GOLDEN, $TARGET_MEEP] for Alveo U55C'
         tag_name: '$CI_COMMIT_TAG'
         assets:
          links:
            - name: 'Bitstream_${TARGET_MEEP}_production'
              url: https://gitlab.bsc.es/meep/FPGA_implementations/AlveoU280/fpga_shell/-/jobs/${JOB_ID_MEEP}/artifacts/raw/bitstream/${date_format}_acme_ea_4hv2_production.bit 
            - name: 'Bitstream_${TARGET_GOLDEN}_production'
              url: https://gitlab.bsc.es/meep/FPGA_implementations/AlveoU280/fpga_shell/-/jobs/${JOB_ID_GOLDEN}/artifacts/raw/bitstream/${date_format}_acme_ea_4a_production.bit                   
